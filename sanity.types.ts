/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type TextAndImage = {
  _type: 'textAndImage'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
}

export type HeadingTagline = {
  _type: 'headingTagline'
  title?: string
  description?: string
}

export type PainPoints = {
  _type: 'painPoints'
  title?: string
  colorName?:
    | 'rDark'
    | 'rGreen'
    | 'rGreenHover'
    | 'rPurple'
    | 'rPurpleHover'
    | 'rTurquoise'
    | 'rAzure'
    | 'rDeepBlue'
  painPoints?: Array<string>
}

export type Faq = {
  _type: 'faq'
  title?: string
  description?: string
  faqItems?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'summaryItem'
  }>
}

export type Methodology = {
  _type: 'methodology'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  summary?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'summaryItem'
  }>
}

export type ProjectShowcase = {
  _type: 'projectShowcase'
  title?: string
  description?: string
  projects?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'useCase'
  }>
}

export type ServiceHighlights = {
  _type: 'serviceHighlights'
  title?: string
  description?: string
  services?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'serviceCard'
  }>
}

export type Hero = {
  _type: 'hero'
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  cta?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'ctaButton'
  }
}

export type UseCaseGallery = {
  _type: 'useCaseGallery'
  gallery?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
    _key: string
  }>
}

export type UseCaseItem = {
  _type: 'useCaseItem'
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type RelatedPost = {
  _type: 'relatedPost'
  title?: string
  description?: string
  cta?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'ctaButton'
  }
  relatedPosts?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'post'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'useCase'
      }
  >
}

export type Header = {
  _id: string
  _type: 'header'
  _createdAt: string
  _updatedAt: string
  _rev: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  menu?: Array<
    {
      _key: string
    } & CustomLink
  >
}

export type Footer = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  description?: string
  menuTitle?: string
  menu?: Array<
    {
      _key: string
    } & CustomLink
  >
  contactTitle?: string
  contactMenu?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  certificationsTitle?: string
  certifications?: Array<
    {
      _key: string
    } & CertificationType
  >
  menuSubFooter?: Array<
    {
      _key: string
    } & CustomLink
  >
}

export type CertificationType = {
  _type: 'certificationType'
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  title?: string
  description?: string
  issueDate?: string
}

export type Headband = {
  _id: string
  _type: 'headband'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  cta?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'ctaButton'
  }
}

export type Testimonial = {
  _id: string
  _type: 'testimonial'
  _createdAt: string
  _updatedAt: string
  _rev: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  description?: string
  name?: string
  job?: string
  avatar?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
}

export type HeroSection = {
  _id: string
  _type: 'heroSection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  cta?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'ctaButton'
  }
}

export type Document = {
  _type: 'reference'
  _ref: string
  _weak?: boolean
}

export type PainPointsItems = {
  _id: string
  _type: 'painPointsItems'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  colorName?:
    | 'rDark'
    | 'rGreen'
    | 'rGreenHover'
    | 'rPurple'
    | 'rPurpleHover'
    | 'rTurquoise'
    | 'rAzure'
    | 'rDeepBlue'
  faqItems?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'summaryItem'
  }>
}

export type ServiceCard = {
  _id: string
  _type: 'serviceCard'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: string
  icon?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  link?: CustomLink
}

export type SummaryItem = {
  _id: string
  _type: 'summaryItem'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: string
}

export type CtaButton = {
  _id: string
  _type: 'ctaButton'
  _createdAt: string
  _updatedAt: string
  _rev: string
  link?: CustomLink
  colorName?:
    | 'rDark'
    | 'rGreen'
    | 'rGreenHover'
    | 'rPurple'
    | 'rPurpleHover'
    | 'rTurquoise'
    | 'rAzure'
    | 'rDeepBlue'
}

export type CustomLink = {
  _type: 'customLink'
  linkType?: 'external' | 'internal'
  href?: string
  title?: string
  blank?: boolean
  internalLink?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'post'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
}

export type Service = {
  _id: string
  _type: 'service'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  content?: Array<
    | (
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'heroSection'
          }
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'headband'
          }
      )
    | ({
        _key: string
      } & ServiceHighlights)
    | ({
        _key: string
      } & ProjectShowcase)
    | ({
        _key: string
      } & Methodology)
    | ({
        _key: string
      } & Faq)
    | ({
        _key: string
      } & PainPoints)
    | ({
        _key: string
      } & HeadingTagline)
    | ({
        _key: string
      } & TextAndImage)
  >
  seo?: Seo
}

export type UseCaseTag = {
  _id: string
  _type: 'useCaseTag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
}

export type PostTag = {
  _id: string
  _type: 'postTag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
}

export type UseCase = {
  _id: string
  _type: 'useCase'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  url?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  intro?: UseCaseIntro
  content?: Array<
    | ({
        _key: string
      } & UseCaseItem)
    | ({
        _key: string
      } & UseCaseGallery)
  >
  testimonial?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'testimonial'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'useCaseTag'
  }>
  moreDetailsPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'post'
  }>
  similarProjectPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'useCase'
  }>
  heroSection?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'heroSection'
  }>
  seo?: Seo
}

export type UseCaseIntro = {
  _type: 'useCaseIntro'
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  summary?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'summaryItem'
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  content?: Array<
    | (
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'heroSection'
          }
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'headband'
          }
      )
    | ({
        _key: string
      } & ServiceHighlights)
    | ({
        _key: string
      } & ProjectShowcase)
    | ({
        _key: string
      } & Methodology)
  >
  seo?: Seo
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'postTag'
  }>
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  relatedPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'post'
  }>
  seo?: Seo
}

export type Seo = {
  _type: 'seo'
  title?: string
  description?: string
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  }
}

export type CustomImage = {
  _type: 'customImage'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  alt?: string
  caption?: string
}

export type Track = {
  _type: 'track'
  title?: string
  duration?: number
}

export type Record = {
  _id: string
  _type: 'record'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  releaseDate?: string
  likes?: number
  dislikes?: number
  genres?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'genre'
  }>
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  tracks?: Array<
    {
      _key: string
    } & Track
  >
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  siteTitle?: string
}

export type Genre = {
  _id: string
  _type: 'genre'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
}

export type Artist = {
  _id: string
  _type: 'artist'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Code = {
  _type: 'code'
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}
export declare const internalGroqTypeReferenceTo: unique symbol


// Source: ./app/sanity/queries.ts
// Variable: RECORDS_QUERY
// Query: *[_type == "record"][0...12]|order(title asc){    _id,    _type,    title,    releaseDate,    "slug": slug.current,    "artist": artist->name,    image  } | order(releaseDate desc)
export type RECORDS_QUERYResult = Array<{
  _id: string
  _type: 'record'
  title: string | null
  releaseDate: string | null
  slug: string | null
  artist: null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  } | null
}>

// Variable: RECORD_QUERY
// Query: *[_type == "record" && slug.current == $slug][0]{  ...,  _id,  title,  releaseDate,  // GROQ can re-shape data in the request!  "slug": slug.current,  "artist": artist->name,  // coalesce() returns the first value that is not null  // so we can ensure we have at least a zero  "likes": coalesce(likes, 0),  "dislikes": coalesce(dislikes, 0),  // for simplicity in this demo these are typed as "any"  // we can make them type-safe with a little more work  // https://www.simeongriggs.dev/type-safe-groq-queries-for-sanity-data-with-zod  image,  content,  // this is how we extract values from arrays  tracks[]{    _key,    title,    duration  }}
export type RECORD_QUERYResult = {
  _id: string
  _type: 'record'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string | null
  slug: string | null
  releaseDate: string | null
  likes: number | 0
  dislikes: number | 0
  genres?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'genre'
  }>
  content: Array<
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
  > | null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  } | null
  tracks: Array<{
    _key: string
    title: string | null
    duration: number | null
  }> | null
  artist: null
} | null

// Variable: LAYOUT_QUERY
// Query: {  "header": *[_type == "header" ]{  "logo": logo{"url": asset->url, alt},  menu[]{      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  }}[0],  "footer": *[_type == "footer" ]{  "logo": logo{"url": asset->url, alt},  description,  menuTitle,  menu[]{      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  },  certificationsTitle,  certifications[]{    title,     description,     "logo": logo{"url": asset->url, alt},     issueDate  },  contactTitle,  contactMenu[]{    ...  },  menuSubFooter[]{      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  }}[0],}
export type LAYOUT_QUERYResult = {
  header: {
    logo: {
      url: string | null
      alt: string | null
    } | null
    menu: Array<{
      external: {
        blank: boolean | null
        href: string | null
        title: string | null
      }
      internal:
        | {
            title: string | null
            slug: string | null
            type: 'page'
          }
        | {
            title: string | null
            slug: string | null
            type: 'post'
          }
        | null
      linkType: 'external' | 'internal' | null
    }> | null
  } | null
  footer: {
    logo: {
      url: string | null
      alt: string | null
    } | null
    description: string | null
    menuTitle: string | null
    menu: Array<{
      external: {
        blank: boolean | null
        href: string | null
        title: string | null
      }
      internal:
        | {
            title: string | null
            slug: string | null
            type: 'page'
          }
        | {
            title: string | null
            slug: string | null
            type: 'post'
          }
        | null
      linkType: 'external' | 'internal' | null
    }> | null
    certificationsTitle: string | null
    certifications: Array<{
      title: string | null
      description: string | null
      logo: {
        url: string | null
        alt: string | null
      } | null
      issueDate: string | null
    }> | null
    contactTitle: string | null
    contactMenu: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
    }> | null
    menuSubFooter: Array<{
      external: {
        blank: boolean | null
        href: string | null
        title: string | null
      }
      internal:
        | {
            title: string | null
            slug: string | null
            type: 'page'
          }
        | {
            title: string | null
            slug: string | null
            type: 'post'
          }
        | null
      linkType: 'external' | 'internal' | null
    }> | null
  } | null
}

// Variable: HOMEPAGE_QUERY
// Query: *[_type == "page" && title == 'Accueil'] {...,  _id,  _type,  title,  _createdAt,  _updatedAt,  "slug": slug.current,  seo {    title,    description  },  content[]{      _type,  _type == "reference" => {    "_refDetails": @-> {      _id,      _type,      _type == "headband" => {  title,    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},      _type == "heroSection" => {  title,  description[],  "image": image{"url": asset->url, alt},    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},    }  },  _type == "serviceHighlights" => {  title,  description,  services[] {    title,    description,    "icon": icon{"url": asset->url, alt},      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  }},  _type == "methodology" => {  title,  description,  image {    "imageUrl": asset->url,    alt  },  summary[] {    title,    description  }},  _type == "projectShowcase" => {  title,  description,  projects[]-> {    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "slug": slug.current,    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  }},  _type == "painPoints" => {  title,  colorName,  painPoints[]},  _type == "headingTagline" => {  title,  description},  _type == "textAndImage" => {  title,  description,  "image": image{"url": asset->url, alt}},  _type == "faq" => {  title,  description,  faqItems[]{    title,    description  }},  }}
export type HOMEPAGE_QUERYResult = Array<{
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string | null
  slug: string | null
  content: Array<
    | {
        _type: 'methodology'
        title: string | null
        description: string | null
        image: {
          imageUrl: string | null
          alt: string | null
        } | null
        summary: Array<{
          title: null
          description: null
        }> | null
      }
    | {
        _type: 'projectShowcase'
        title: string | null
        description: string | null
        projects: Array<{
          _id: string
          _type: 'useCase'
          title: string | null
          description: string | null
          _updatedAt: string
          _createdAt: string
          slug: string | null
          image: {
            url: string | null
            alt: string | null
          } | null
          tags: Array<{
            title: null
            slug: null
            _type: 'reference'
          }> | null
        }> | null
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'headband'
          title: string | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'heroSection'
          title: string | null
          description: Array<{
            children?: Array<{
              marks?: Array<string>
              text?: string
              _type: 'span'
              _key: string
            }>
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal'
            listItem?: 'bullet' | 'number'
            markDefs?: Array<{
              href?: string
              _type: 'link'
              _key: string
            }>
            level?: number
            _type: 'block'
            _key: string
          }> | null
          image: {
            url: string | null
            alt: string | null
          } | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'serviceHighlights'
        title: string | null
        description: string | null
        services: Array<{
          title: null
          description: null
          icon: null
          external: {
            blank: null
            href: null
            title: null
          }
          internal: null
          linkType: null
        }> | null
      }
  > | null
  seo: {
    title: string | null
    description: string | null
  } | null
}>

// Variable: SERVICE_QUERY
// Query: *[_type == "service" && slug.current == $slug][0]{  _id,  _type,  _createdAt,  _updatedAt,  title,  description,  "image": image{"url": asset->url, alt},  seo {  title,  description},  content[]{      _type,  _type == "reference" => {    "_refDetails": @-> {      _id,      _type,      _type == "headband" => {  title,    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},      _type == "heroSection" => {  title,  description[],  "image": image{"url": asset->url, alt},    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},    }  },  _type == "serviceHighlights" => {  title,  description,  services[] {    title,    description,    "icon": icon{"url": asset->url, alt},      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  }},  _type == "methodology" => {  title,  description,  image {    "imageUrl": asset->url,    alt  },  summary[] {    title,    description  }},  _type == "projectShowcase" => {  title,  description,  projects[]-> {    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "slug": slug.current,    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  }},  _type == "painPoints" => {  title,  colorName,  painPoints[]},  _type == "headingTagline" => {  title,  description},  _type == "textAndImage" => {  title,  description,  "image": image{"url": asset->url, alt}},  _type == "faq" => {  title,  description,  faqItems[]{    title,    description  }},  }}
export type SERVICE_QUERYResult = {
  _id: string
  _type: 'service'
  _createdAt: string
  _updatedAt: string
  title: string | null
  description: string | null
  image: {
    url: string | null
    alt: string | null
  } | null
  seo: {
    title: string | null
    description: string | null
  } | null
  content: Array<
    | {
        _type: 'faq'
        title: string | null
        description: string | null
        faqItems: Array<{
          title: null
          description: null
        }> | null
      }
    | {
        _type: 'headingTagline'
        title: string | null
        description: string | null
      }
    | {
        _type: 'methodology'
        title: string | null
        description: string | null
        image: {
          imageUrl: string | null
          alt: string | null
        } | null
        summary: Array<{
          title: null
          description: null
        }> | null
      }
    | {
        _type: 'painPoints'
        title: string | null
        colorName:
          | 'rAzure'
          | 'rDark'
          | 'rDeepBlue'
          | 'rGreen'
          | 'rGreenHover'
          | 'rPurple'
          | 'rPurpleHover'
          | 'rTurquoise'
          | null
        painPoints: Array<string> | null
      }
    | {
        _type: 'projectShowcase'
        title: string | null
        description: string | null
        projects: Array<{
          _id: string
          _type: 'useCase'
          title: string | null
          description: string | null
          _updatedAt: string
          _createdAt: string
          slug: string | null
          image: {
            url: string | null
            alt: string | null
          } | null
          tags: Array<{
            title: null
            slug: null
            _type: 'reference'
          }> | null
        }> | null
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'headband'
          title: string | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'heroSection'
          title: string | null
          description: Array<{
            children?: Array<{
              marks?: Array<string>
              text?: string
              _type: 'span'
              _key: string
            }>
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal'
            listItem?: 'bullet' | 'number'
            markDefs?: Array<{
              href?: string
              _type: 'link'
              _key: string
            }>
            level?: number
            _type: 'block'
            _key: string
          }> | null
          image: {
            url: string | null
            alt: string | null
          } | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'serviceHighlights'
        title: string | null
        description: string | null
        services: Array<{
          title: null
          description: null
          icon: null
          external: {
            blank: null
            href: null
            title: null
          }
          internal: null
          linkType: null
        }> | null
      }
    | {
        _type: 'textAndImage'
        title: string | null
        description: string | null
        image: {
          url: string | null
          alt: string | null
        } | null
      }
  > | null
} | null

// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{  _id,  _type,  _createdAt,  _updatedAt,  title,  "slug": slug.current,  seo {  title,  description},  content[]{      _type,  _type == "reference" => {    "_refDetails": @-> {      _id,      _type,      _type == "headband" => {  title,    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},      _type == "heroSection" => {  title,  description[],  "image": image{"url": asset->url, alt},    cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }},    }  },  _type == "serviceHighlights" => {  title,  description,  services[] {    title,    description,    "icon": icon{"url": asset->url, alt},      "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType  }},  _type == "methodology" => {  title,  description,  image {    "imageUrl": asset->url,    alt  },  summary[] {    title,    description  }},  _type == "projectShowcase" => {  title,  description,  projects[]-> {    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "slug": slug.current,    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  }},  _type == "painPoints" => {  title,  colorName,  painPoints[]},  _type == "headingTagline" => {  title,  description},  _type == "textAndImage" => {  title,  description,  "image": image{"url": asset->url, alt}},  _type == "faq" => {  title,  description,  faqItems[]{    title,    description  }},  }}
export type PAGE_QUERYResult = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  title: string | null
  slug: string | null
  seo: {
    title: string | null
    description: string | null
  } | null
  content: Array<
    | {
        _type: 'methodology'
        title: string | null
        description: string | null
        image: {
          imageUrl: string | null
          alt: string | null
        } | null
        summary: Array<{
          title: null
          description: null
        }> | null
      }
    | {
        _type: 'projectShowcase'
        title: string | null
        description: string | null
        projects: Array<{
          _id: string
          _type: 'useCase'
          title: string | null
          description: string | null
          _updatedAt: string
          _createdAt: string
          slug: string | null
          image: {
            url: string | null
            alt: string | null
          } | null
          tags: Array<{
            title: null
            slug: null
            _type: 'reference'
          }> | null
        }> | null
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'headband'
          title: string | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'reference'
        _refDetails: {
          _id: string
          _type: 'heroSection'
          title: string | null
          description: Array<{
            children?: Array<{
              marks?: Array<string>
              text?: string
              _type: 'span'
              _key: string
            }>
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal'
            listItem?: 'bullet' | 'number'
            markDefs?: Array<{
              href?: string
              _type: 'link'
              _key: string
            }>
            level?: number
            _type: 'block'
            _key: string
          }> | null
          image: {
            url: string | null
            alt: string | null
          } | null
          cta: {
            _type: 'reference'
            colorName: null
            link: null
          } | null
        }
      }
    | {
        _type: 'serviceHighlights'
        title: string | null
        description: string | null
        services: Array<{
          title: null
          description: null
          icon: null
          external: {
            blank: null
            href: null
            title: null
          }
          internal: null
          linkType: null
        }> | null
      }
  > | null
} | null

// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  _type,  title,  _createdAt,  _updatedAt,  content,  "slug": slug.current,  "author": author->name,  "authorImage": author->image,  "estimatedReadingTime": round(length(pt::text(content)) / 5 / 180 ),  "image": image{"url": asset->url, alt},  tags[]{    title,    "slug": slug.current,  },  relatedPosts[]->{    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "estimatedReadingTime": round(length(pt::text(content)) / 5 / 180 ),    "slug": slug.current,    author-> {      name,      "image": image{"url": asset->url, alt}    },    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  },  seo {    title,    description  },}
export type POST_QUERYResult = {
  _id: string
  _type: 'post'
  title: string | null
  _createdAt: string
  _updatedAt: string
  content: Array<
    | ({
        _key: string
      } & Code)
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
  > | null
  slug: string | null
  author: string | null
  authorImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'customImage'
  } | null
  estimatedReadingTime: unknown
  image: {
    url: string | null
    alt: string | null
  } | null
  tags: Array<{
    title: null
    slug: null
  }> | null
  relatedPosts: Array<{
    _id: string
    _type: 'post'
    title: string | null
    description: string | null
    _updatedAt: string
    _createdAt: string
    estimatedReadingTime: unknown
    slug: string | null
    author: {
      name: string | null
      image: {
        url: string | null
        alt: string | null
      } | null
    } | null
    image: {
      url: string | null
      alt: string | null
    } | null
    tags: Array<{
      title: null
      slug: null
      _type: 'reference'
    }> | null
  }> | null
  seo: {
    title: string | null
    description: string | null
  } | null
} | null

// Variable: POSTS_QUERY
// Query: *[_type == "post"][0...12]|order(title asc){    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "estimatedReadingTime": round(length(pt::text(content)) / 5 / 180 ),    "slug": slug.current,    author-> {      name,      "image": image{"url": asset->url, alt}    },    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }} | order(_updatedAt desc)
export type POSTS_QUERYResult = Array<{
  _id: string
  _type: 'post'
  title: string | null
  description: string | null
  _updatedAt: string
  _createdAt: string
  estimatedReadingTime: unknown
  slug: string | null
  author: {
    name: string | null
    image: {
      url: string | null
      alt: string | null
    } | null
  } | null
  image: {
    url: string | null
    alt: string | null
  } | null
  tags: Array<{
    title: null
    slug: null
    _type: 'reference'
  }> | null
}>

// Variable: USE_CASE_QUERY
// Query: *[_type == "useCase" && slug.current == $slug][0]{...,  _id,  _type,  title,  url,  description,  _createdAt,  _updatedAt,  content[] {    _type,    "image": image{"url": asset->url, alt},    description,    gallery[] {      "url": asset-> url,      alt    },  },  "slug": slug.current,  "image": image{"url": asset->url, alt},  intro {    _type,    summary,    "image": image{"url": asset->url, alt},    description,    title  },  tags[]{    title,    "slug": slug.current,  },    testimonial[]->{    _id,    _type,    name,    description,    job,    "logo": logo{"url": asset->url, alt},    avatar{      alt,      "url": asset->url, alt    }  },  moreDetailsPosts[]->{    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "slug": slug.current,    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  },  similarProjectPosts[]->{    _id,    _type,    title,    description,    _updatedAt,    _createdAt,    "slug": slug.current,    "image": image{"url": asset->url, alt},    tags[]{      title,      "slug": slug.current,      _type    }  },  heroSection[]->{    _id,    _type,    title,    description,    "image": image{"url": asset->url, alt},      cta {    _type,    colorName,    link {        "external": {    blank,    href,    title  },  "internal": internalLink-> {    title,    "slug": slug.current,    "type": _type  },  linkType    }  }  },  seo {    title,    description  },}
export type USE_CASE_QUERYResult = {
  _id: string
  _type: 'useCase'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string | null
  slug: string | null
  url: string | null
  description: string | null
  image: {
    url: string | null
    alt: string | null
  } | null
  intro: {
    _type: 'useCaseIntro'
    summary: Array<{
      _ref: string
      _type: 'reference'
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: 'summaryItem'
    }> | null
    image: {
      url: string | null
      alt: string | null
    } | null
    description: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }> | null
    title: string | null
  } | null
  content: Array<
    | {
        _type: 'useCaseGallery'
        image: null
        description: null
        gallery: Array<{
          url: string | null
          alt: string | null
        }> | null
      }
    | {
        _type: 'useCaseItem'
        image: {
          url: string | null
          alt: string | null
        } | null
        description: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }> | null
        gallery: null
      }
  > | null
  testimonial: Array<{
    _id: string
    _type: 'testimonial'
    name: string | null
    description: string | null
    job: string | null
    logo: {
      url: string | null
      alt: string | null
    } | null
    avatar: {
      alt: string | null
      url: string | null
    } | null
  }> | null
  tags: Array<{
    title: null
    slug: null
  }> | null
  moreDetailsPosts: Array<{
    _id: string
    _type: 'post'
    title: string | null
    description: string | null
    _updatedAt: string
    _createdAt: string
    slug: string | null
    image: {
      url: string | null
      alt: string | null
    } | null
    tags: Array<{
      title: null
      slug: null
      _type: 'reference'
    }> | null
  }> | null
  similarProjectPosts: Array<{
    _id: string
    _type: 'useCase'
    title: string | null
    description: string | null
    _updatedAt: string
    _createdAt: string
    slug: string | null
    image: {
      url: string | null
      alt: string | null
    } | null
    tags: Array<{
      title: null
      slug: null
      _type: 'reference'
    }> | null
  }> | null
  heroSection: Array<{
    _id: string
    _type: 'heroSection'
    title: string | null
    description: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }> | null
    image: {
      url: string | null
      alt: string | null
    } | null
    cta: {
      _type: 'reference'
      colorName: null
      link: null
    } | null
  }> | null
  seo: {
    title: string | null
    description: string | null
  } | null
} | null

// Variable: USE_CASES_QUERY
// Query: *[_type == "useCase"][0...12]|order(title asc){  _id,  _type,  title,  description,  _updatedAt,  _createdAt,  "slug": slug.current,  "image": image{"url": asset->url, alt},  tags[]{    title,    "slug": slug.current,  }} | order(_updatedAt desc)
export type USE_CASES_QUERYResult = Array<{
  _id: string
  _type: 'useCase'
  title: string | null
  description: string | null
  _updatedAt: string
  _createdAt: string
  slug: string | null
  image: {
    url: string | null
    alt: string | null
  } | null
  tags: Array<{
    title: null
    slug: null
  }> | null
}>


